devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
library("roxygen2")
library('devtools')
load_all()
document()
build()
install()
build()
devtools::build_manual()
check()
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
check()
load_all()
document()
build()
devtools::build_manual()
install.packages("C:/Users/adaline_juan/Desktop/NETI2_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("QUIC")
install.packages("C:/Users/adaline_juan/Desktop/NETI2_1.0.0.tar.gz", repos = NULL, type = "source")
library("roxygen2")
library('devtools')
load_all()
Bdocument()
build()
check()
install()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
source('C:/Users/adaline_juan/Desktop/chNet/R/generate.data.R')
load_all()
source('C:/Users/adaline_juan/Desktop/chNet/R/generate.data.R')
load_all()
#' \item{\code{rho}}{A list (length = 2) of the partical coefficients matrices (\eqn{p \times p}).}
#'
#' @references  Jia-Juan Tu, Le Ou-Yang, Hong Yan, Xiao-Fei Zhang and Hong Qin (2020), Differential network analysis
#'  by simultaneously considering the change of gene interactions and gene expression
#' @author Jia-Juan Tu
#' @seealso { \code{\link{chNet}}, \code{\link{TCGA.BRCA}},\code{\link{GSE13159.AML}}}
#' @export
#' @examples
#' # Simulation data
#' data.x = generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
generate.data < function(p = 100, n = 100, umin = 0.5, umax = 1){
A = as_adjacency_matrix(sample_pa(p, directed = FALSE), type = "both", sparse=FALSE)
W = matrix(runif(p*p, min = umin, max = umax)*(2*rbinom(p*p, 1, 0.5) - 1), p, p)
W1 = A*W
W1 = W1*upper.tri(W1)
W2 = W1
W1scale=W1[1:floor(0.1*p),]
Idx1 = which(W1scale!=0)
Idx2 = sample(Idx1, floor(length(Idx1)*0.5))
W2[Idx2] = runif(length(Idx2), min = umin, max = umax)*(2*rbinom(length(Idx2), 1, 0.5) - 1)
W1 = W1 + t(W1)
W2 = W2 + t(W2)
eigen.min = min(eigen(W1)$values,eigen(W2)$values)
W1 = W1 + (abs(eigen.min) + 0.1)*diag(p)
W2 = W2 + (abs(eigen.min) + 0.1)*diag(p)
D1 = diag((diag(W1))^(-0.5))
R1 = D1%*%W1%*%D1
D2 = diag((diag(W2))^(-0.5))
R2 = D2%*%W2%*%D2
diag1 = rep(1,p)
diag2 = rep(1,p)
diag2[1:floor(alpha*p)] = 4  #  goal
Omega1 =  diag(sqrt(diag1))%*%R1%*%diag(sqrt(diag1))
Omega2 =  diag(sqrt(diag2))%*%R2%*%diag(sqrt(diag2))
mu1=rep(0,p)
mu2=mu1
mu2[1:floor(alpha*p)]=2
X1 = mvrnorm(n, mu1, solve(Omega1))
X2 = mvrnorm(n, mu2, solve(Omega2))
X = rbind(X1, X2)
group = c(rep(1,n), rep(2,n))
Omega = list()
Omega[[1]] = Omega1
Omega[[2]] = Omega2
rho = list()
rho[[1]] = - diag((diag(Omega1))^(-1/2))%*%Omega1%*%diag((diag(Omega1))^(-1/2))
rho[[2]] = - diag((diag(Omega2))^(-1/2))%*%Omega2%*%diag((diag(Omega2))^(-1/2))
result = list(X = X, group = group, rho = rho)
}
source('C:/Users/adaline_juan/Desktop/chNet/R/generate.data.R')
generate.data
remove(list=ls())
library("roxygen2")
library('devtools')
load_all()
library("roxygen2")
library('devtools')
load_all()
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/chNet.R')
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate.data.R')
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate.data.R')
A = as_adjacency_matrix(sample_pa(p, directed = FALSE), type = "both", sparse=FALSE)
W = matrix(runif(p*p, min = umin, max = umax)*(2*rbinom(p*p, 1, 0.5) - 1), p, p)
W1 = A*W
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate_data.R')
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate.data.R')
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate.data.R')
A = as_adjacency_matrix(sample_pa(p, directed = FALSE), type = "both", sparse=FALSE)
source('C:/Users/Administrator.000/Desktop/pa/chNet/R/generate.data.R')
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
devtools::build_manual()
document()
devtools::build_manual()
load_all()
document()
devtools::build_manual()
devtools::build_manual()
load_all()
document()
build()
check()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
devtools::build_manual()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
load_all()
document()
build()
devtools::build_manual()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
?? mclapply
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
?qnorm
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
data.x= generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
result = chNet(data.x$X,data.x$group, lambar = 2.78, parallel = FALSE, nCpus = 4)
X=data.x$X
group=data.x$group
cc = compute.statis(X,group, parallel, nCpus)
parallel = FALSE
nCpus = 4
cc = compute.statis(X,group, parallel, nCpus)
lasso.estimator <- function(X, lam1 = seq(40,1)/20, parallel = FALSE, nCpus = 4){
n = dim(X)[1]
p = dim(X)[2]
centered.X = scale(X, scale = FALSE)
Sigma = cov(centered.X)
DSigma = diag(Sigma)
lam2 = sqrt(DSigma*log(p)/n)
beta = array(0, dim=c(p,p,length(lam1)))
res = array(0,dim=c(n,p,length(lam1)))
wrapper = function(i){
fit=glmnet(centered.X[,-i], centered.X[,i], lambda= lam1*lam2[i])
fit$beta=as.matrix(fit$beta)
if(ncol(fit$beta)<length(lam1)){
tmp = matrix(0,nrow = nrow(fit$beta),ncol = length(lam1))
tmp[,1:ncol(fit$beta)]=fit$beta
tmp[,ncol(fit$beta):length(lam1)] = fit$beta[,ncol(fit$beta)]
fit$beta = tmp
}
if(i==1){
beta[2:p,i,]=fit$beta
}else if(i==p){
beta[1:(p-1),i,]=fit$beta
}else{
beta[1:(i-1),i,]=fit$beta[1:(i-1),]
beta[(i+1):p,i,]=fit$beta[i:nrow(fit$beta),]
}
res[,i,] = matrix(rep(centered.X[,i],length(lam1)),ncol = length(lam1)) - centered.X[,-i]%*%fit$beta
out = list(beta = beta[,i,], res = res[,i,])
return(out)
}
if(parallel){
fit =mclapply(1:p, wrapper, mc.cores=nCpus)
}else{
fit =lapply(1:p, wrapper)
}
for(i in 1:p){
beta[,i,]=fit[[i]]$beta
res[,i,]=fit[[i]]$res
}
r.tilde = array(0, dim=c(p,p,length(lam1)))
r.hat = array(0, dim=c(p,p,length(lam1)))
for(k in seq(length(lam1))){
r.tilde[,,k] = cov(res[,,k])*(n-1)/(n)
r.hat[,,k] =r.tilde[,,k] + diag(diag(r.tilde[,,k]))%*%beta[,,k] + t(beta[,,k])%*%diag(diag(r.tilde[,,k]))
}
out = list(beta = beta, res = res, r.tilde = r.tilde, r.hat = r.hat)
return(out)
}
n <- nrow(X)
p <- ncol(X)
lam1 = seq(40,1)/20
n <- nrow(X)
?nrow
lam1 = seq(40,1)/20
nlam1=length(lam1)
stopifnot(length(group) == n)
X1 = X[group==unique(group)[1],]
X2 = X[group==unique(group)[2],]
n1 <- nrow(X1)
n1=n2=p=100
X1 = X[group==unique(group)[1],]
X2 = X[group==unique(group)[2],]
#step 1  calculate the t-statistical of mu
xbar1 <- colMeans( X1)
xbar2 <- colMeans( X2)
s1 <- apply( X1, 2, sd)
s2 <- apply( X2, 2, sd)
tmu <- (xbar1-xbar2) / sqrt(s1^2/n1+ s2^2/n2)
fit1 = lasso.estimator(X1, lam1=seq(40,4)/20,parallel, nCpus)
fit1 = lasso.estimator(X1, lam1=seq(40,4)/20,parallel, nCpus)
p <- ncol(X)
fit1 = lasso.estimator(X1, lam1=seq(40,4)/20,parallel, nCpus)
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
data("GSE13159.AML")
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
dim(X)
??#' @import Matrix mvtnorm glmnet
?? glmnet
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
data.x= generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
result = chNet(data.x$X,data.x$group, lambar = 2.78, parallel = FALSE, nCpus = 4)
result $diff.edge
data("TCGA.BRCA")
dim(TCGA.BRCA$X)
data("TCGA.BRCA")
result = chNet(TCGA.BRCA$X,TCGA.BRCA$group, lambar = 2.85, parallel = FALSE, nCpus = 4)
result = chNet(TCGA.BRCA$X,TCGA.BRCA$group, lambar = 2.85, parallel = FALSE, nCpus = 4)
data("GSE13159.AML")
result = chNet(TCGA.BRCA$X,TCGA.BRCA$group, lambar = 2.7, parallel = FALSE, nCpus = 4)
remove(list=(ls()))
library("roxygen2")
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
devtools::build_manual()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
devtools::build_manual()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
devtools::build_manual()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
install()
library(chNet)
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
# Simulation data
data.x= generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
result = chNet(data.x$X,data.x$group, lambar = 2.78, parallel = FALSE, nCpus = 4)
result$diff.edge
a=result$diff.edge
result = chNet(data.x$X,data.x$group, lambar = 1.78, parallel = FALSE, nCpus = 4)
a=result$diff.edge
sum(a)
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
load_all()
document()
build()
check()
install()
library(chNet)
# Simulation data
data.x= generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
result = chNet(data.x$X,data.x$group, lambar = 0.8, parallel = FALSE, nCpus = 4)
aa=result$diff.edge
remove(list=(ls()))
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
install()
devtools::build_manual()
library(chNet)
# Simulation data
data.x= generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
result = chNet(data.x$X,data.x$group, lambar = 3, parallel = FALSE, nCpus = 4)
a=result$diff.edge
sum(a)
b=result$diff.gene
sum(b)
View(result)
result[["diff.gene"]]
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
load_all()
document()
build()
check()
devtools::build_manual()
remove(list = ls())
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
load_all()
document()
build()
check()
library("roxygen2")
library('devtools')
load_all()
document()
library("roxygen2")
library('devtools')
load_all()
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
load_all()
document()
build()
check()
load_all()
document()
build()
check()
devtools::build_manual()
library("roxygen2")
library('devtools')
load_all()
document()
build()
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
?save
library("roxygen2")
library('devtools')
load_all()
document()
build()
check()
install()
devtools::build_manual()
remove.packages("chNet")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
setwd("E:/TJJ-2018/chNet_BIO/chNet20210414/chNet_package/chNet")
remove(list=ls())
source("violin_plot.R")
#########load data
load("Basaln5p.Rdata")
load("LumAn5p.Rdata")
LumA=LumAn5p
Basal=Basaln5p
datx=matrix(list(),2)
datx[[1]]= LumA
datx[[2]]=Basal
setwd("E:/TJJ-2018/chNet_BIO/chNet20210414/chNet_package/chNet")
remove(list=ls())
source("violin_plot.R")
#########load data
load("Basaln5p.Rdata")
load("LumAn5p.Rdata")
LumA=LumAn5p
Basal=Basaln5p
datx=matrix(list(),2)
datx[[1]]= LumA
datx[[2]]=Basal
remove(list=ls())
setwd("E:/TJJ-2018/chNet_BIO/chNet20210414/chNet_package/chNet")
remove(list=ls())
