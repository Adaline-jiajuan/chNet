
#' @title Generate simulated data
#' @description The complete procedure for generating simulated data. For details, refer to simulation study (Section 3.1 in the main text).
#' @importFrom igraph as_adjacency_matrix sample_pa
#' @importFrom  MASS mvrnorm
#' @importFrom  stats rbinom rnorm runif sd cov
#' @usage generate.data (p, n, umin, umax)
#' @param p The number of genes.
#' @param n The sample size.
#' @param umin  The lower limits of the edge values.
#' @param umax  The upper limits of the edge values.
#' @details The function is used to generate the gene expression datasets.
#' @return
#' \item{\code{X}}{ A matrix of sample  matrice  (\eqn{2n \times p}) from two different conditions.}
#' \item{\code{group}}{ A matrix of sample label matrice  (\eqn{2n \times 1}) from two different conditions.}
#' \item{\code{rho}}{A list (length = 2) of the partical coefficients matrices (\eqn{p \times p}).}
#'
#' @references  Jia-Juan Tu, Le Ou-Yang, Hong Yan, Xiao-Fei Zhang and Hong Qin (2020), Differential network analysis
#'  by simultaneously considering the change of gene interactions and gene expression.
#' @author Jia-Juan Tu
#' @seealso { \code{\link{chNet}}, \code{\link{TCGA.BRCA}}, \code{\link{GSE13159.AML}}}
#' @export
#' @examples
#' # Simulation data
#' data.x = generate.data(p = 100, n = 100, umin = 0.5, umax = 1)
generate.data <-  function(p = 100, n = 100, umin = 0.5, umax = 1){

      A = as_adjacency_matrix(sample_pa(p, directed = FALSE), type = "both", sparse=FALSE)
      W = matrix(runif(p*p, min = umin, max = umax)*(2*rbinom(p*p, 1, 0.5) - 1), p, p)
      W1 = A*W
      W1 = W1*upper.tri(W1)


      W2 = W1
      W1scale=W1[1:floor(0.1*p),]
      Idx1 = which(W1scale!=0)
      Idx2 = sample(Idx1, floor(length(Idx1)*0.5))
      W2[Idx2] = runif(length(Idx2), min = umin, max = umax)*(2*rbinom(length(Idx2), 1, 0.5) - 1)

      W1 = W1 + t(W1)
      W2 = W2 + t(W2)


      eigen.min = min(eigen(W1)$values,eigen(W2)$values)

      W1 = W1 + (abs(eigen.min) + 0.1)*diag(p)
      W2 = W2 + (abs(eigen.min) + 0.1)*diag(p)


      D1 = diag((diag(W1))^(-0.5))
      R1 = D1%*%W1%*%D1
      D2 = diag((diag(W2))^(-0.5))
      R2 = D2%*%W2%*%D2


      diag1 = rep(1,p)
      diag2 = rep(1,p)
      diag2[1:floor(0.1*p)] = 4  #  goal

      Omega1 =  diag(sqrt(diag1))%*%R1%*%diag(sqrt(diag1))
      Omega2 =  diag(sqrt(diag2))%*%R2%*%diag(sqrt(diag2))

      mu1=rep(0,p)
      mu2=mu1
      mu2[1:floor(0.1*p)]=2
      X1 = mvrnorm(n, mu1, solve(Omega1))
      X2 = mvrnorm(n, mu2, solve(Omega2))

      X = rbind(X1, X2)
      group = c(rep(1,n), rep(2,n))

      Omega = list()
      Omega[[1]] = Omega1
      Omega[[2]] = Omega2


      rho = list()
      rho[[1]] = - diag((diag(Omega1))^(-1/2))%*%Omega1%*%diag((diag(Omega1))^(-1/2))
      rho[[2]] = - diag((diag(Omega2))^(-1/2))%*%Omega2%*%diag((diag(Omega2))^(-1/2))

      result = list(X = X, group = group, rho = rho)

    }
